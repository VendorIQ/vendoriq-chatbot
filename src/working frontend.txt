import React, { useState, useEffect } from "react";
import { createClient } from '@supabase/supabase-js';
import ReactMarkdown from "react-markdown";

// --- SUPABASE ---
const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL,
  process.env.REACT_APP_SUPABASE_ANON_KEY
);

const botAvatar = process.env.PUBLIC_URL + "/bot-avatar.png";
const userAvatar = process.env.PUBLIC_URL + "/user-avatar.png";

// --- QUESTIONS ---
const questions = [
  {
    number: 1,
    text: "Does your Company have a written OHS Policy that has been approved by your top management and has been communicated throughout the organization and to your subcontractors (when applicable)?",
    disqualifiesIfNo: true,
    requirements: [
      "A copy of the OHS Policy.",
      "Evidence of how the OHS Policy has been communicated to employees (if available subcontractors) (i.e. Email, training, notice boards)."
    ]
  },
  {
    number: 2,
    text: "Has your Company committed any infringements to the laws or regulations concerning Occupational Health & Safety (OHS) matters in the last three (03) years or is under any current investigation by, or in discussions with, any regulatory authority in respect of any OHS matters, accident or alleged breach of OHS laws or regulations?",
    disqualifiesIfNo: false,
    requirements: [
      "A declaration from your top management that your company has not committed any infringements to the laws or regulations or is not under any current investigation by any regulatory authority in respect of any OHS matters (Statement should be signed off by CEO with official letterhead, stamp, etc.)",
      "A copy of the documented process or the systematic identification and assessment of legal applicable laws and regulations (i.e. procedure, instruction)",
      "A list of all OHS requirements including laws and regulations that the Company has identified as applicable",
      "A report of the legal compliance check conducted within the last twelve (12) months and corrective action plan to close any gaps identified"
    ]
  },
  {
    number: 3,
    text: "Does the company have a process for Incident Reporting and Investigation, including a system for recording safety incidents (near misses, injuries, fatalities etc.) that meets local regulations and Ericsson's OHS Requirements at a minimum?",
    disqualifiesIfNo: false,
    requirements: [
      "A copy of the documented process (i.e. procedure, instruction).",
      "Evidence of how the process has been communicated to employees (if available subcontractors) (i.e. Email, training, notice boards).",
      "Evidence of investigations, identified root causes and action plans for incidents and near misses (i.e. investigation reports) (excluding personal identifiable information).",
      `Records if the Company had any work-related fatality and/or incidents (internal employee, sub-contractors, or external party) that caused permanent disability or absence of over thirty (30) days in the last three (03) years.
      Evidence requested includes:
        1. If yes, the Company must provide the investigation report/s, and corrective action plans to prevent re-occurrence, including a status report on the corrective actions.
        2. If not, the Company must provide a declaration from its top management that there has not been any work-related fatality and/or incident that caused permanent disability or absence of over thirty (30) days in the last three (03) years.`,
      "Last three (03) years statistics including incidents, near misses, fatalities, work related illness."
    ]
  }
];

// --- APP ---
export default function App() {
  const [messages, setMessages] = useState([]);
  const [typing, setTyping] = useState(false);
  const [typingText, setTypingText] = useState("");
  const [step, setStep] = useState(-1);
  const [showUploads, setShowUploads] = useState(false);
  const [justAnswered, setJustAnswered] = useState(false);
  const [email, setEmail] = useState("");
  const [sessionId, setSessionId] = useState(null);
  const [showEmailInput, setShowEmailInput] = useState(true);
  const [showComplete, setShowComplete] = useState(false);
  const [uploadReqIdx, setUploadReqIdx] = useState(0);
  const [showMissingReasonInput, setShowMissingReasonInput] = useState(false);
  const [missingReason, setMissingReason] = useState("");
  const [waitingGemini, setWaitingGemini] = useState(false);
  const [pendingFile, setPendingFile] = useState(null);
  const [showIntro, setShowIntro] = useState(false);
  const [summary, setSummary] = useState("");
  const [score, setScore] = useState(null);
  const [showSummary, setShowSummary] = useState(false);

  // --- Animate chat bubbles ---
  function sendBubblesSequentially(messagesArray, from = "bot", delay = 650, callback) {
    let idx = 0;
    function sendNext() {
      setTyping(true);
      setTypingText("");
      let i = 0;
      const msg = messagesArray[idx];
      const interval = setInterval(() => {
        setTypingText(msg.slice(0, i + 1));
        i++;
        if (i >= msg.length) {
          clearInterval(interval);
          setTimeout(() => {
            setMessages(prev => [...prev, { from, text: msg }]);
            setTyping(false);
            setTypingText("");
            idx++;
            if (idx < messagesArray.length) {
              setTimeout(sendNext, delay);
            } else if (callback) {
              setTimeout(callback, delay);
            }
          }, 350);
        }
      }, 12);
    }
    sendNext();
  }

  // --- Dialog logic ---
  function getBotMessage({ step, answer, justAnswered }) {
    if (step < 0) {
      return [
        "Hi there! Welcome to the VendorIQ Supplier Compliance Interview.",
        "I’ll be your guide today—just answer a few questions, and I’ll help you every step of the way.",
        "Let's begin!"
      ];
    }
    const q = questions[step];
    if (!justAnswered) {
      return [
        "Let's talk about your company's safety practices.",
        `**Question ${q.number}:** ${q.text}`
      ];
    }
    if (answer === "Yes") {
      return [
        "Awesome, thanks for letting me know!",
        "Since you answered yes, could you please upload the required documents? (You can drag and drop your files or click to upload.)"
      ];
    }
    if (answer === "No" && q.disqualifiesIfNo) {
      return [
        "Thanks for your honesty!",
        "Just so you know, having a written OHS Policy is an important requirement. Let's continue."
      ];
    }
    return [
      "Thanks for your response!",
      "Let's move on to the next question."
    ];
  }

  // --- Email validation ---
  const validateEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  // --- Session start with intro ---
  const initSession = async () => {
    if (!validateEmail(email)) {
      alert("Please enter a valid email address.");
      return;
    }
    const { data } = await supabase.from("sessions").select("*").eq("email", email).single();
    let sessionStep = 0;
    if (data) {
      setSessionId(data.id);
      sessionStep = data.current_question;
    } else {
      const { data: newSession } = await supabase
        .from("sessions")
        .insert({ email, current_question: 0, status: "active" })
        .select()
        .single();
      if (newSession) setSessionId(newSession.id);
      else {
        alert('Could not start session. Please try again or contact support.');
        return;
      }
    }
    setShowEmailInput(false);
    setShowIntro(true);
    sendBubblesSequentially(getBotMessage({ step: -1 }), "bot", 650, () => {
      setShowIntro(false); // End intro
      setStep(sessionStep);
    });
  };

  // --- Question effect ---
  useEffect(() => {
    if (step >= 0 && step < questions.length && !justAnswered && !showUploads && !showIntro) {
      sendBubblesSequentially(getBotMessage({ step, justAnswered: false }));
    } else if (step >= questions.length && !showSummary) {
      // Call API to get session summary
      async function fetchSummary() {
        setTyping(true);
        setTypingText("Generating assessment summary...");
        try {
          const response = await fetch("https://4d66d45e-0288-4203-935e-1c5d2a182bde-00-38ratc2twzear.pike.replit.dev/api/run-gemini-feedback", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email, sessionId })
          });
          const result = await response.json();
          setSummary(result.feedback);
          setScore(result.score);
          setShowSummary(true);
        } catch (err) {
          setSummary("Failed to generate summary. Please contact support.");
          setShowSummary(true);
        }
        setTyping(false);
        setTypingText("");
      }
      fetchSummary();
    }

    // eslint-disable-next-line
  }, [step, justAnswered, showUploads, showIntro]);

  // --- Handle answer ---
  const handleAnswer = (answer) => {
    setMessages(prev => [...prev, { from: "user", text: answer }]);
    const botMsgs = getBotMessage({ step, answer, justAnswered: true });
    sendBubblesSequentially(botMsgs, "bot", 650, () => {
      if (answer === "Yes" && questions[step].requirements.length > 0) {
        setShowUploads(true);
      } else {
        setTimeout(() => {
          setStep(prev => prev + 1);
          setJustAnswered(false);
        }, 350);
      }
    });
    setJustAnswered(true);
  };

  // --- RENDER ---
  return (
    <div style={{ maxWidth: 700, margin: "40px auto", fontFamily: "Inter, sans-serif", background: "#F7F8FA", minHeight: "100vh" }}>
      <nav style={{
        background: "#333",
        color: "#fff",
        padding: "10px 16px",
        borderRadius: 8,
        marginBottom: 10,
        fontSize: "1.1rem"
      }}>
        <strong>VendorIQ Chatbot</strong>
      </nav>

      {/* EMAIL INPUT */}
      {showEmailInput && (
        <div style={{ marginBottom: 14 }}>
          <input
            type="email"
            placeholder="Enter your email to begin"
            value={email}
            onChange={e => setEmail(e.target.value)}
            onKeyDown={e => e.key === "Enter" && initSession()}
            style={{ padding: "8px", width: "80%", fontSize: "0.97rem" }}
          />
          <button onClick={initSession} style={{ marginLeft: 10, padding: "8px", fontSize: "0.97rem" }}>Start</button>
        </div>
      )}

      {/* CHAT HISTORY */}
      {messages.map((msg, idx) => (
        <div
          key={idx}
          style={{
            display: "flex",
            flexDirection: msg.from === "bot" ? "row" : "row-reverse",
            alignItems: "center",
            margin: "22px 0",
            maxWidth: "70%"
          }}
        >
          <img
            src={msg.from === "bot" ? botAvatar : userAvatar}
            alt={msg.from === "bot" ? "AI Bot" : "You"}
            style={{
              width: 48,
              height: 48,
              borderRadius: "50%",
              background: "#fff",
              margin: msg.from === "bot" ? "0 16px 0 0" : "0 0 0 16px",
              boxShadow: "0 1px 8px #0002",
              alignSelf: "center"
            }}
          />
          <div
            style={{
              background: msg.from === "bot" ? "#0085CA" : "#6D7B8D",
              color: "#fff",
              borderRadius: "18px",
              padding: "1px 28px",
              minWidth: 48,
              maxWidth: "70%",
              fontSize: "1.13rem",
              fontFamily: "Inter, sans-serif",
              boxShadow: "0 1px 6px #0001",
              position: "relative",
              textAlign: "left",
              wordBreak: "break-word",
            }}
          >
            <ReactMarkdown>{msg.text}</ReactMarkdown>
            <div
              style={{
                position: "absolute",
                top: 17,
                [msg.from === "bot" ? "left" : "right"]: "-20px",
                width: 0,
                height: 0,
                borderTop: "12px solid transparent",
                borderBottom: "12px solid transparent",
                borderRight: msg.from === "bot"
                  ? "20px solid #0085CA"
                  : "none",
                borderLeft: msg.from === "bot"
                  ? "none"
                  : "20px solid #6D7B8D"
              }}
            />
          </div>
        </div>
      ))}

      {/* TYPING */}
      {typing && (
        <div style={{
          display: "flex",
          alignItems: "center",
          margin: "32px 0",
          maxWidth: "100%"
        }}>
          <img
            src={botAvatar}
            alt="AI Bot"
            style={{
              width: 48,
              height: 48,
              borderRadius: "50%",
              background: "#fff",
              marginRight: 16,
              boxShadow: "0 1px 8px #0002",
              alignSelf: "center"
            }}
          />
          <div
            style={{
              background: "#0085CA",
              color: "#fff",
              borderRadius: "18px",
              padding: "18px 28px",
              minWidth: 48,
              maxWidth: "70%",
              fontSize: "1.13rem",
              fontFamily: "Inter, sans-serif",
              boxShadow: "0 1px 6px #0001",
              position: "relative",
              textAlign: "left",
              wordBreak: "break-word",
              fontStyle: "italic"
            }}
          >
            {typingText}<span className="typing-cursor">|</span>
            <div
              style={{
                position: "absolute",
                top: 28,
                left: "-20px",
                width: 0,
                height: 0,
                borderTop: "12px solid transparent",
                borderBottom: "12px solid transparent",
                borderRight: "20px solid #0085CA"
              }}
            />
          </div>
        </div>
      )}

      {/* UPLOAD SECTION */}
      {showUploads && step < questions.length && (
        <UploadSection
          question={questions[step]}
          requirementIdx={uploadReqIdx}
          setRequirementIdx={setUploadReqIdx}
          onDone={() => {
            setShowUploads(false);
            setUploadReqIdx(0);
            setStep(prev => prev + 1);
            setJustAnswered(false);
          }}
          email={email}
          messages={messages}
          setMessages={setMessages}
          waitingGemini={waitingGemini}
          setWaitingGemini={setWaitingGemini}
          typing={typing}
          setTyping={setTyping}
          setTypingText={setTypingText}
          pendingFile={pendingFile}
          setPendingFile={setPendingFile}
          showMissingReasonInput={showMissingReasonInput}
          setShowMissingReasonInput={setShowMissingReasonInput}
          missingReason={missingReason}
          setMissingReason={setMissingReason}
        />
      )}

      {/* YES/NO BUTTONS - only after intro is done */}
      {!typing && !showUploads && !showEmailInput && step >= 0 && step < questions.length && messages.length > 0 && !showIntro && (
        <div style={{ marginTop: 16 }}>
          <button onClick={() => handleAnswer("Yes")} style={{ marginRight: 12, fontSize: "0.98rem" }}>Yes</button>
          <button onClick={() => handleAnswer("No")} style={{ fontSize: "0.98rem" }}>No</button>
        </div>
      )}
    </div>
  );
}

// --- UPLOAD SECTION ---
function UploadSection({
  question, requirementIdx, setRequirementIdx, onDone,
  email, messages, setMessages, waitingGemini, setWaitingGemini,
  typing, setTyping, setTypingText,
  pendingFile, setPendingFile,
  showMissingReasonInput, setShowMissingReasonInput,
  missingReason, setMissingReason
}) {
  const requirement = question.requirements[requirementIdx];
  const [showSkipReasonInput, setShowSkipReasonInput] = useState(false);
  const [skipReason, setSkipReason] = useState("");
  return (
    <div>
      {/* Bot bubble: ask for the requirement */}
      <div style={{
        display: "flex",
        alignItems: "center",
        margin: "12px 0",
        maxWidth: "70%"
      }}>
        <img
          src={botAvatar}
          alt="AI Bot"
          style={{
            width: 40,
            height: 40,
            borderRadius: "50%",
            background: "#fff",
            marginRight: 14,
            boxShadow: "0 1px 8px #0002",
            alignSelf: "center"
          }}
        />
        <div
          style={{
            background: "#0085CA",
            color: "#fff",
            borderRadius: "18px",
            padding: "7px 16px",
            minWidth: 32,
            maxWidth: "52%",
            fontSize: "1.06rem",
            fontFamily: "Inter, sans-serif",
            boxShadow: "0 1px 6px #0001",
            position: "relative",
            textAlign: "left",
            wordBreak: "break-word",
          }}
        >
          {`Please upload: ${requirement}`}
          <div
            style={{
              position: "absolute",
              top: 14,
              left: "-18px",
              width: 0,
              height: 0,
              borderTop: "8px solid transparent",
              borderBottom: "8px solid transparent",
              borderRight: "18px solid #0085CA"
            }}
          />
        </div>
      </div>
      {/* Only show file input if no file is selected */}
      {!pendingFile && (
        <input
          type="file"
          style={{ marginTop: 12, fontSize: "0.95rem" }}
          accept=".pdf,.jpg,.jpeg,.png,.doc,.docx,.txt"
          disabled={waitingGemini || showMissingReasonInput}
          onChange={e => {
            const file = e.target.files[0];
            if (!file) return;
            setPendingFile(file);
          }}
        />
      )}
      {/* Preview, Delete, Submit */}
      {pendingFile && (
        <div style={{ marginTop: 14, display: 'flex', alignItems: 'center', gap: 10 }}>
          <div>
            <strong>{pendingFile.name}</strong>
            <br />
            {pendingFile.type.startsWith("image/") && (
              <img
                src={URL.createObjectURL(pendingFile)}
                alt="Preview"
                style={{ maxHeight: 120, borderRadius: 6, marginTop: 4 }}
              />
            )}
            {pendingFile.type === "application/pdf" && (
              <span style={{ fontSize: "0.96rem" }}>PDF selected (preview not shown)</span>
            )}
            {pendingFile.type.startsWith("text/") && (
              <span style={{ fontSize: "0.96rem" }}>Text file selected</span>
            )}
          </div>
          <button
            onClick={() => setPendingFile(null)}
            style={{
              marginLeft: 8,
              background: "#ff5c5c",
              color: "#fff",
              border: "none",
              borderRadius: "50%",
              width: 28,
              height: 28,
              fontSize: 18,
              cursor: "pointer"
            }}
            aria-label="Delete file"
            title="Remove this file"
          >×</button>
          <button
            style={{
              marginLeft: 10,
              padding: "6px 18px",
              background: "#0066d6",
              color: "#fff",
              border: "none",
              borderRadius: 8,
              fontSize: "0.97rem",
              cursor: "pointer"
            }}
            disabled={waitingGemini}
            onClick={async () => {
              setMessages(prev => [...prev, { from: "user", text: `Uploaded: ${pendingFile.name}` }]);
              setWaitingGemini(true);
              setTyping(true);
              setTypingText("Checking your document...");

              const formData = new FormData();
              formData.append("file", pendingFile);
              formData.append("requirement", requirement); // You can remove this if not needed
              formData.append("email", email);
              // --- PATCHED: send question number to backend ---
              formData.append("questionNumber", question.number);

              try {
                const response = await fetch("https://4d66d45e-0288-4203-935e-1c5d2a182bde-00-38ratc2twzear.pike.replit.dev/api/gemini-check-file", {
                  method: "POST",
                  body: formData
                });
                const result = await response.json();
                setTyping(false);
                setTypingText("");
                setPendingFile(null);
                if (result.success) {
                  setMessages(prev => [
                    ...prev,
                    { from: "bot", text: result.feedback }
                  ]);
                  if (requirementIdx + 1 < question.requirements.length) {
                    setTimeout(() => setRequirementIdx(requirementIdx + 1), 650);
                  } else {
                    setTimeout(onDone, 1000);
                  }
                } else {
                  setMessages(prev => [
                    ...prev,
                    { from: "bot", text: result.feedback }
                  ]);
                }
              } catch (err) {
                setTyping(false);
                setTypingText("");
                setPendingFile(null);
                setMessages(prev => [
                  ...prev,
                  { from: "bot", text: "Sorry, there was a problem checking your document. Please try again." }
                ]);
              }
              setWaitingGemini(false);
            }}
          >
            Submit
          </button>
        </div>
      )}

      {/* --- Skip requirement logic --- */}
      {!showSkipReasonInput && (
        <button
          style={{
            marginLeft: 10,
            padding: "6px 18px",
            background: "#adadad",
            color: "#333",
            border: "none",
            borderRadius: 8,
            fontSize: "0.97rem",
            cursor: "pointer"
          }}
          onClick={() => setShowSkipReasonInput(true)}
          disabled={waitingGemini}
        >
          Skip requirement (and add comment)
        </button>
      )}

      {showSkipReasonInput && (
        <div style={{ marginTop: 10 }}>
          <input
            type="text"
            placeholder="Explain why this requirement is being skipped…"
            value={skipReason}
            onChange={e => setSkipReason(e.target.value)}
            style={{
              width: "60%",
              padding: 6,
              fontSize: "0.96rem",
              borderRadius: 7,
              border: "1px solid #ccc"
            }}
            disabled={waitingGemini}
          />
          <button
            style={{
              marginLeft: 8,
              padding: "6px 16px",
              background: "#f2994a",
              color: "#fff",
              border: "none",
              borderRadius: 7,
              fontSize: "0.96rem",
              cursor: "pointer"
            }}
            disabled={!skipReason.trim()}
            onClick={() => {
              setMessages(prev => [
                ...prev,
                { from: "user", text: `Skipped requirement: ${requirement}` },
                { from: "user", text: `Reason: ${skipReason}` },
                { from: "bot", text: "This requirement was skipped. Your comment has been recorded for auditor review." }
              ]);
              setShowSkipReasonInput(false);
              setSkipReason("");
              // Move to next requirement or finish
              if (requirementIdx + 1 < question.requirements.length) {
                setTimeout(() => setRequirementIdx(requirementIdx + 1), 650);
              } else {
                setTimeout(onDone, 1000);
              }
            }}
          >
            Confirm Skip
          </button>
          <button
            style={{
              marginLeft: 8,
              padding: "6px 14px",
              background: "#eee",
              color: "#555",
              border: "none",
              borderRadius: 7,
              fontSize: "0.96rem",
              cursor: "pointer"
            }}
            onClick={() => {
              setShowSkipReasonInput(false);
              setSkipReason("");
            }}
          >
            Cancel
          </button>
        </div>
      )}

      {/* "I do not have this document" Button */}
      {!showMissingReasonInput && !waitingGemini && (
        <button
          style={{
            marginTop: 12,
            fontSize: "0.95rem",
            background: "#e65c2a",
            color: "#fff",
            border: "none",
            borderRadius: 8,
            padding: "6px 20px",
            cursor: "pointer"
          }}
          onClick={() => {
            setMessages(prev => [...prev, { from: "user", text: "I do not have this document." }]);
            setTyping(true);
            setTypingText("Could you tell me why you don’t have it?");
            setTimeout(() => {
              setTyping(false);
              setTypingText("");
              setShowMissingReasonInput(true);
            }, 1200);
          }}
        >
          I do not have this document
        </button>
      )}
      {/* Reason input if user doesn't have the document */}
      {showMissingReasonInput && (
        <div style={{ marginTop: 12 }}>
          <input
            type="text"
            placeholder="Type your reason..."
            value={missingReason}
            onChange={e => setMissingReason(e.target.value)}
            style={{
              width: "76%",
              padding: 7,
              fontSize: "0.97rem",
              borderRadius: 8,
              border: "1px solid #ccc"
            }}
            disabled={waitingGemini}
            onKeyDown={async e => {
              if (e.key === "Enter" && missingReason.trim()) {
                setMessages(prev => [...prev, { from: "user", text: missingReason }]);
                setShowMissingReasonInput(false);
                setMissingReason("");
                setWaitingGemini(true);
                setTyping(true);
                setTypingText("Let me review your reason…");
                setTimeout(async () => {
                  setTyping(false);
                  setTypingText("");
                  setMessages(prev => [
                    ...prev,
                    {
                      from: "bot",
                      text:
                        "Thank you for sharing your reason. Please be aware that missing documents may affect your compliance status, but we appreciate your transparency."
                    }
                  ]);
                  if (requirementIdx + 1 < question.requirements.length) {
                    setTimeout(() => setRequirementIdx(requirementIdx + 1), 650);
                  } else {
                    setTimeout(onDone, 1000);
                  }
                  setWaitingGemini(false);
                }, 1600);
              }
            }}
          />
          <button
            onClick={async () => {
              if (!missingReason.trim()) return;
              setMessages(prev => [...prev, { from: "user", text: missingReason }]);
              setShowMissingReasonInput(false);
              setMissingReason("");
              setWaitingGemini(true);
              setTyping(true);
              setTypingText("Let me review your reason…");
              setTimeout(async () => {
                setTyping(false);
                setTypingText("");
                setMessages(prev => [
                  ...prev,
                  {
                    from: "bot",
                    text:
                      "Thank you for sharing your reason. Please be aware that missing documents may affect your compliance status, but we appreciate your transparency."
                  }
                ]);
                if (requirementIdx + 1 < question.requirements.length) {
                  setTimeout(() => setRequirementIdx(requirementIdx + 1), 650);
                } else {
                  setTimeout(onDone, 1000);
                }
                setWaitingGemini(false);
              }, 1600);
            }}
            style={{
              marginLeft: 10,
              padding: "7px 14px",
              background: "#3477eb",
              color: "#fff",
              border: "none",
              borderRadius: 7,
              fontSize: "0.97rem"
            }}
            disabled={!missingReason.trim() || waitingGemini}
          >
            Submit
          </button>
        </div>
      )}
    </div>
  );
}
